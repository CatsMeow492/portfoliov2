{"version":3,"sources":["app/Neurons.js"],"names":["neurons","document","querySelector","width","window","innerWidth","height","innerHeight","ctx","getContext","particules","configuration","numberParticules","minSpeed","maxSpeed","maxDistance","radius","backgroundColor","frontColor","mouseSpace","mouseX","mouseY","addEventListener","e","clientX","clientY","render","requestAnimationFrame","fillStyle","fillRect","forEach","particule","x","speedX","y","speedY","mouseDx","mouseDy","mouseD","Math","sqrt","isColliding","angle","atan2","cos","sin","beginPath","arc","PI","fill","nextParticule","dx","dy","d","save","globalAlpha","strokeStyle","moveTo","lineTo","stroke","restore","createParticules","Promise","resolve","i","random","push","then"],"mappings":"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","file":"Neurons.3f2834e7.js","sourceRoot":"../src","sourcesContent":["const neurons = document.querySelector('neurons')\nneurons.width = window.innerWidth\nneurons.height = window.innerHeight\nconst ctx = neurons.getContext('2d')\nconst particules = []\nconst configuration = {\n  numberParticules: 120,\n  minSpeed: 0.4,\n  maxSpeed: 0.8,\n  maxDistance: 0.07 * window.innerWidth + 0.05 * window.innerHeight,\n  radius: 2,\n  backgroundColor: '#000',\n  frontColor: '#FFF',\n  mouseSpace: 100\n}\nlet mouseX = -300\nlet mouseY = -300\n\nwindow.addEventListener('mousemove', (e) => {\n  mouseX = e.clientX\n  mouseY = e.clientY\n})\n\nwindow.addEventListener('resize', () => {\n  neurons.width = window.innerWidth\n  neurons.height = window.innerHeight\n})\n\nconst render = () => {\n  requestAnimationFrame(render)\n  ctx.fillStyle = configuration.backgroundColor\n  ctx.fillRect(0, 0, neurons.width, neurons.height)\n  \n  particules.forEach(particule => {\n    const x = particule.x + particule.speedX\n    const y = particule.y + particule.speedY\n    \n    if(x <= 0 || x >= window.innerWidth) particule.speedX *= -1\n    if(y <= 0 || y >= window.innerHeight) particule.speedY *= -1\n    \n    particule.x = x\n    particule.y = y\n    \n    const mouseDx = mouseX - particule.x\n    const mouseDy = mouseY - particule.y\n    const mouseD = Math.sqrt(mouseDx * mouseDx + mouseDy * mouseDy)\n    \n    if(mouseD <= configuration.mouseSpace && false) {\n      if(!particule.isColliding) {\n        const angle = Math.atan2(particule.y - mouseY, particule.y - mouseY);\n        particule.x = Math.cos(angle) * configuration.mouseSpace + 1 + mouseX\n        particule.y = Math.sin(angle) * configuration.mouseSpace + 1 + mouseY\n        particule.isColliding = true\n      } else {\n        particule.speedX *= -1\n        particule.speedY *= -1\n        particule.isColliding = false\n      }\n    }\n    \n    ctx.beginPath()\n    ctx.fillStyle = configuration.frontColor\n    ctx.arc(particule.x, particule.y, configuration.radius, 0, Math.PI * 2, true)\n    ctx.fill()\n    particules.forEach(nextParticule => {\n      const dx = particule.x - nextParticule.x\n      const dy = particule.y - nextParticule.y\n      const d = Math.sqrt(dx * dx + dy * dy)\n      if(d <= configuration.maxDistance) {\n        ctx.save()\n        ctx.globalAlpha = 1 - d / configuration.maxDistance\n        ctx.beginPath()\n        ctx.strokeStyle = configuration.frontColor\n        ctx.moveTo(particule.x, particule.y)\n        ctx.lineTo(nextParticule.x, nextParticule.y)\n        ctx.stroke()\n        ctx.restore()\n      }\n    })\n  })\n}\n\nconst createParticules = () => {\n  return new Promise(resolve => {\n    for(let i = 0; i < configuration.numberParticules; i++) {\n      const particule = {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        speedX: Math.random() * (configuration.maxSpeed - configuration.minSpeed) + configuration.minSpeed,\n        speedY: Math.random() * (configuration.maxSpeed - configuration.minSpeed) + configuration.minSpeed,\n        isColliding: false\n      }\n      if(Math.random() <= 0.5) particule.speedX *= -1\n      if(Math.random() <= 0.5) particule.speedY *= -1\n      particules.push(particule)\n    }\n    resolve()\n  })\n}\n\ncreateParticules()\n.then(() => {\n  render()\n})"]}
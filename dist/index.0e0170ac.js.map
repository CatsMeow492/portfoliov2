{"mappings":"AAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC;AACjD,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU;AACjC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW;AACnC,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;AACpC,MAAM,UAAU,GAAG,EAAE;AACrB,MAAM,aAAa,GAAG;IACpB,gBAAgB,EAAE,GAAG;IACrB,QAAQ,EAAE,GAAG;IACb,QAAQ,EAAE,GAAG;IACb,WAAW,EAAE,IAAI,GAAG,MAAM,CAAC,UAAU,GAAG,IAAI,GAAG,MAAM,CAAC,WAAW;IACjE,MAAM,EAAE,CAAC;IACT,eAAe,EAAE,MAAM;IACvB,UAAU,EAAE,MAAM;IAClB,UAAU,EAAE,GAAG;CAChB;AACD,IAAI,MAAM,GAAG,IAAI;AACjB,IAAI,MAAM,GAAG,IAAI;AAEjB,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,CAAC,CAAC,GAAK;IAC1C,MAAM,GAAG,CAAC,CAAC,OAAO;IAClB,MAAM,GAAG,CAAC,CAAC,OAAO;CACnB,CAAC;AAEF,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAM;IACtC,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU;IACjC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW;CACpC,CAAC;AAEF,MAAM,MAAM,GAAG,IAAM;IACnB,qBAAqB,CAAC,MAAM,CAAC;IAC7B,GAAG,CAAC,SAAS,GAAG,aAAa,CAAC,eAAe;IAC7C,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC;IAEjD,UAAU,CAAC,OAAO,CAAC,CAAA,SAAS,GAAI;QAC9B,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM;QACxC,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM;QAExC,IAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,UAAU,EAAE,SAAS,CAAC,MAAM,IAAI,EAAE;QAC3D,IAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,MAAM,IAAI,EAAE;QAE5D,SAAS,CAAC,CAAC,GAAG,CAAC;QACf,SAAS,CAAC,CAAC,GAAG,CAAC;QAEf,MAAM,OAAO,GAAG,MAAM,GAAG,SAAS,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,MAAM,GAAG,SAAS,CAAC,CAAC;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,OAAO,CAAC;QAElD,aAAa,CAAC,UAAU,CAAA;QAarC,GAAG,CAAC,SAAS,EAAE;QACf,GAAG,CAAC,SAAS,GAAG,aAAa,CAAC,UAAU;QACxC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC;QAC7E,GAAG,CAAC,IAAI,EAAE;QACV,UAAU,CAAC,OAAO,CAAC,CAAA,aAAa,GAAI;YAClC,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC;YACxC,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC;YACxC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;YACtC,IAAG,CAAC,IAAI,aAAa,CAAC,WAAW,EAAE;gBACjC,GAAG,CAAC,IAAI,EAAE;gBACV,GAAG,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,WAAW;gBACnD,GAAG,CAAC,SAAS,EAAE;gBACf,GAAG,CAAC,WAAW,GAAG,aAAa,CAAC,UAAU;gBAC1C,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;gBACpC,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC;gBAC5C,GAAG,CAAC,MAAM,EAAE;gBACZ,GAAG,CAAC,OAAO,EAAE;aACd;SACF,CAAC;KACH,CAAC;CACH;AAED,MAAM,gBAAgB,GAAG,IAAM;IAC7B,OAAO,IAAI,OAAO,CAAC,CAAA,OAAO,GAAI;QAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAE;YACtD,MAAM,SAAS,GAAG;gBAChB,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,UAAU;gBACpC,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,WAAW;gBACrC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,GAAI,CAAA,aAAa,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAA,GAAI,aAAa,CAAC,QAAQ;gBAClG,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,GAAI,CAAA,aAAa,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAA,GAAI,aAAa,CAAC,QAAQ;gBAClG,WAAW,EAAE,KAAK;aACnB;YACD,IAAG,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,EAAE,SAAS,CAAC,MAAM,IAAI,EAAE;YAC/C,IAAG,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,EAAE,SAAS,CAAC,MAAM,IAAI,EAAE;YAC/C,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;SAC3B;QACD,OAAO,EAAE;KACV,CAAC,CAAA;CACH;AAED,gBAAgB,EAAE,CACjB,IAAI,CAAC,IAAM;IACV,MAAM,EAAE;CACT,CAAC","sources":["src/app/Neurons.js"],"sourcesContent":["const neurons = document.querySelector('neurons')\nneurons.width = window.innerWidth\nneurons.height = window.innerHeight\nconst ctx = neurons.getContext('2d')\nconst particules = []\nconst configuration = {\n  numberParticules: 120,\n  minSpeed: 0.4,\n  maxSpeed: 0.8,\n  maxDistance: 0.07 * window.innerWidth + 0.05 * window.innerHeight,\n  radius: 2,\n  backgroundColor: '#000',\n  frontColor: '#FFF',\n  mouseSpace: 100\n}\nlet mouseX = -300\nlet mouseY = -300\n\nwindow.addEventListener('mousemove', (e) => {\n  mouseX = e.clientX\n  mouseY = e.clientY\n})\n\nwindow.addEventListener('resize', () => {\n  neurons.width = window.innerWidth\n  neurons.height = window.innerHeight\n})\n\nconst render = () => {\n  requestAnimationFrame(render)\n  ctx.fillStyle = configuration.backgroundColor\n  ctx.fillRect(0, 0, neurons.width, neurons.height)\n  \n  particules.forEach(particule => {\n    const x = particule.x + particule.speedX\n    const y = particule.y + particule.speedY\n    \n    if(x <= 0 || x >= window.innerWidth) particule.speedX *= -1\n    if(y <= 0 || y >= window.innerHeight) particule.speedY *= -1\n    \n    particule.x = x\n    particule.y = y\n    \n    const mouseDx = mouseX - particule.x\n    const mouseDy = mouseY - particule.y\n    const mouseD = Math.sqrt(mouseDx * mouseDx + mouseDy * mouseDy)\n    \n    if(mouseD <= configuration.mouseSpace && false) {\n      if(!particule.isColliding) {\n        const angle = Math.atan2(particule.y - mouseY, particule.y - mouseY);\n        particule.x = Math.cos(angle) * configuration.mouseSpace + 1 + mouseX\n        particule.y = Math.sin(angle) * configuration.mouseSpace + 1 + mouseY\n        particule.isColliding = true\n      } else {\n        particule.speedX *= -1\n        particule.speedY *= -1\n        particule.isColliding = false\n      }\n    }\n    \n    ctx.beginPath()\n    ctx.fillStyle = configuration.frontColor\n    ctx.arc(particule.x, particule.y, configuration.radius, 0, Math.PI * 2, true)\n    ctx.fill()\n    particules.forEach(nextParticule => {\n      const dx = particule.x - nextParticule.x\n      const dy = particule.y - nextParticule.y\n      const d = Math.sqrt(dx * dx + dy * dy)\n      if(d <= configuration.maxDistance) {\n        ctx.save()\n        ctx.globalAlpha = 1 - d / configuration.maxDistance\n        ctx.beginPath()\n        ctx.strokeStyle = configuration.frontColor\n        ctx.moveTo(particule.x, particule.y)\n        ctx.lineTo(nextParticule.x, nextParticule.y)\n        ctx.stroke()\n        ctx.restore()\n      }\n    })\n  })\n}\n\nconst createParticules = () => {\n  return new Promise(resolve => {\n    for(let i = 0; i < configuration.numberParticules; i++) {\n      const particule = {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight,\n        speedX: Math.random() * (configuration.maxSpeed - configuration.minSpeed) + configuration.minSpeed,\n        speedY: Math.random() * (configuration.maxSpeed - configuration.minSpeed) + configuration.minSpeed,\n        isColliding: false\n      }\n      if(Math.random() <= 0.5) particule.speedX *= -1\n      if(Math.random() <= 0.5) particule.speedY *= -1\n      particules.push(particule)\n    }\n    resolve()\n  })\n}\n\ncreateParticules()\n.then(() => {\n  render()\n})"],"names":[],"version":3,"file":"index.0e0170ac.js.map","sourceRoot":"/__parcel_source_root/"}